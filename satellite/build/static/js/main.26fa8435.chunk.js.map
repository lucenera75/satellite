{"version":3,"sources":["AppContext.js","TodoItem.js","TodoSuggest.js","TodoEdit.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","todo","context","useContext","className","currentTodoId","id","allDeps","dependsOn","map","d","board","todos","openDeps","filter","active","tabIndex","setCurrentTodoId","e","key","removeTodo","type","checked","onChange","updateTodo","title","length","getSuggestionValue","suggestion","renderSuggestion","TodoSuggest","getSuggestions","value","re","RegExp","inputValue","trim","toLowerCase","inputLength","console","log","getCurrentTodo","Object","values","indexOf","split","t","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","bind","this","inputProps","style","wordBreak","placeholder","onKeyPress","push","onSuggestionSelected","Component","contextType","currentTodo","useEffect","onClick","createAndEditNewTodo","autoFocus","target","tid","_tid","display","flexDirection","width","height","overflow","TodoEdit","sort","a","b","openDepsA","openDepsB","TodoItem","loadBoard","axios","get","saveBoard","put","App","props","metadata","Date","getTime","description","addTodo","todoId","setBoard","data","setInterval","Provider","Board","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26fa8435.chunk.js","sourcesContent":["import React from 'react';\n\nconst AppContext = React.createContext({\n\n});\n\nexport default AppContext;","import React from \"react\";\nimport AppContext from \"./AppContext\";\n\nexport default ({ todo }) => {\n  const context = React.useContext(AppContext);\n  const className =\n    context.currentTodoId === todo.id\n      ? \"list-group-item active\"\n      : \"list-group-item\";\n  debugger\n  const allDeps = todo.dependsOn.map(d => context.board.todos[d]);\n  const openDeps = allDeps.filter(d => d.active);\n  return (\n    <li\n      className=\"list-group-item\"\n      tabIndex=\"0\"\n      className={className}\n      onFocus={() => context.setCurrentTodoId(todo.id)}\n      onKeyPress={e => {\n        if (e.key === \"Delete\") {\n          context.removeTodo(todo);\n        }\n      }}\n    >\n      <input\n        type=\"checkbox\"\n        checked={!todo.active}\n        onChange={() => {\n          todo.active = !todo.active;\n          context.updateTodo(todo);\n        }}\n      />\n      {`-${todo.title}-${openDeps.length}/${allDeps.length}`}\n    </li>\n  );\n};\n","import React from \"react\";\nimport AppContext from \"./AppContext\";\nimport Autosuggest from \"react-autosuggest\";\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.title;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => <div>{suggestion.title}</div>;\n\nexport default class TodoSuggest extends React.Component {\n  static contextType = AppContext;\n  constructor() {\n    super();\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: \"\",\n      suggestions: []\n    };\n    this.getSuggestions = this.getSuggestions.bind(this);\n  }\n\n  getSuggestions = value => {\n    const punct =\n      \"\\\\[\" +\n      \"\\\\!\" +\n      '\\\\\"' +\n      \"\\\\#\" +\n      \"\\\\$\" + // since javascript does not\n      \"\\\\%\" +\n      \"\\\\&\" +\n      \"\\\\'\" +\n      \"\\\\(\" +\n      \"\\\\)\" + // support POSIX character\n      \"\\\\*\" +\n      \"\\\\+\" +\n      \"\\\\,\" +\n      \"\\\\\\\\\" +\n      \"\\\\-\" + // classes, we'll need our\n      \"\\\\.\" +\n      \"\\\\/\" +\n      \"\\\\:\" +\n      \"\\\\;\" +\n      \"\\\\<\" + // own version of [:punct:]\n      \"\\\\=\" +\n      \"\\\\>\" +\n      \"\\\\?\" +\n      \"\\\\@\" +\n      \"\\\\[\" +\n      \"\\\\]\" +\n      \"\\\\^\" +\n      \"\\\\_\" +\n      \"\\\\`\" +\n      \"\\\\{\" +\n      \"\\\\|\" +\n      \"\\\\}\" +\n      \"\\\\~\" +\n      \"\\\\]\";\n    const re = new RegExp( // tokenizer\n      \"\\\\s*\" + // discard possible leading whitespace\n      \"(\" + // start capture group\n      \"\\\\.{3}\" + // ellipsis (must appear before punct)\n      \"|\" + // alternator\n      \"\\\\w+\\\\-\\\\w+\" + // hyphenated words (must appear before punct)\n      \"|\" + // alternator\n      \"\\\\w+'(?:\\\\w+)?\" + // compound words (must appear before punct)\n      \"|\" + // alternator\n      \"\\\\w+\" + // other words\n      \"|\" + // alternator\n      \"[\" +\n      punct +\n      \"]\" + // punct\n        \")\" // end capture group\n    );\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    console.log(inputValue);\n    const todo = this.context.getCurrentTodo()\n    return inputLength === 0\n      ? []\n      : Object.values(this.context.board.todos).filter(value => {\n          if (todo.dependsOn.indexOf(value.id) >=0) {return false}\n          const tokens = value.title.split(re).map(t => t.toLowerCase());\n          // console.log(tokens);\n          const validtokens = tokens.filter(t => {\n            const test =\n              t.trim() !== \"\" &&\n              inputValue.trim() != \"\" &&\n              (t.toLowerCase().indexOf(inputValue.toLowerCase()) >= 0 ||\n                inputValue.toLowerCase().indexOf(t.toLowerCase()) >= 0);\n            // console.log(t, inputValue, test);\n            return test;\n          });\n\n          // const found = tokens.indexOf(inputValue.toLowerCase()) >= 0;\n          // console.log(\"validtokens: \", validtokens);\n          return validtokens.length > 0;\n        });\n  };\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: this.getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      className:\"form-control\",\n      style:{wordBreak: \"break-word\"},\n      placeholder: \"...\",\n      value,\n      onChange: this.onChange,\n      onKeyPress: (e) => {\n        console.log(\"key \",e.key)\n        if (e.key === \"Enter\"){\n          console.log(this.suggestion,this.state.value)\n          const todo = this.context.getCurrentTodo()\n          todo.dependsOn.push(this.suggestion.id)\n          this.context.updateTodo(todo)\n        }\n        // if (e.key === 'Delete') {\n        //   context.removeTodo(todo)\n        // }\n    }\n\n    };\n\n    // Finally, render it!\n    console.log(value)\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n        onSuggestionSelected={(e,{suggestion}) => {this.suggestion = suggestion}}        \n      />\n    );\n  }\n}\n","import React from \"react\";\nimport AppContext from \"./AppContext\";\nimport TodoSuggest from \"./TodoSuggest\";\nimport Autosuggest from \"react-autosuggest\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport default () => {\n  const context = React.useContext(AppContext);\n  const currentTodo = context.board.todos[context.currentTodoId];\n  React.useEffect(() => {\n    return () => {};\n  });\n  if (!currentTodo) {\n    return (\n      <div>\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => context.createAndEditNewTodo()}\n        >\n          create new\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {/* {JSON.stringify(context.getCurrentTodo())} */}\n      <button\n        className=\"btn btn-primary\"\n        onClick={() => context.createAndEditNewTodo()}\n      >\n        create new\n      </button>\n      <hr />\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        autoFocus\n        placeholder=\"title\"\n        onChange={e => {\n          const todo = { ...context.getCurrentTodo() };\n          todo.title = e.target.value;\n          context.updateTodo(todo);\n        }}\n        value={context.getCurrentTodo().title}\n      />\n      <hr />\n      <ul>\n        <li>\n          <TodoSuggest />\n        </li>\n        {context.getCurrentTodo().dependsOn.map(tid => {\n          return (\n            <li key={tid}>\n              <button\n                onClick={() => {\n                  const todo = context.getCurrentTodo();\n                  todo.dependsOn = todo.dependsOn.filter(_tid => _tid !== tid);\n                  context.updateTodo(todo);\n                }}\n              >\n                x\n              </button>\n              {context.board.todos[tid].title}{\" \"}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import React from \"react\";\nimport AppContext from \"./AppContext\";\nimport TodoItem from \"./TodoItem\";\nimport TodoEdit from \"./TodoEdit\";\n\nexport default () => {\n  const context = React.useContext(AppContext);\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\"\n      }}\n    >\n      <div style={{ width: \"600px\", height: \"600px\", overflow: \"scroll\" }}>\n        <TodoEdit />\n      </div>\n      <div style={{ width: \"600px\", height: \"600px\", overflow: \"scroll\" }}>\n        <ul className=\"list-group\">\n          {Object.values(context.board.todos)\n            .sort(\n              (a,\n              b) => {\n                if (a.active && !b.active) return -1\n                if (!a.active && b.active) return 1\n                const allDepsA = a.dependsOn.map(\n                  d => context.board.todos[d]\n                );\n                const openDepsA = allDepsA.filter(d => d.active);\n                const allDepsB = b.dependsOn.map(\n                  d => context.board.todos[d]\n                );\n                const openDepsB = allDepsB.filter(d => d.active);\n                return openDepsA.length - openDepsB.length;\n              }\n            )\n            .map(todo => (\n              <TodoItem key={todo.id} todo={todo} />\n            ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport AppContext from \"./AppContext\";\nimport axios from \"axios\";\nimport Board from \"./Board\";\n\n/*\n *\n * board: {\n *  todos: {\n *    10001: {id: 10001, title: \"jlh\", summary: \"udgkwdck\", dependsOn: [10002,10003,...]},\n *    10002: {id: 10001, title: \"jlh\", summary: \"udgkwdck\", dependsOn: [10004,10005,...]},\n *    ...\n *  }\n *  metedata: {}\n * }\n *\n * when load first this is to load a board and invoke setBoard\n */\n\nconst loadBoard = async () => {\n  const board = await axios.get(\"http://localhost:9898/boards/1\");\n  return board;\n};\nconst saveBoard = async board => {\n  const result = await axios.put(\"http://localhost:9898/boards/1\", board);\n  // console.log(result)\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: {\n        todos: {},\n        metadata: {}\n      },\n      currentTodo: false,\n      createAndEditNewTodo: () => {\n        const todo = {\n          id: new Date().getTime(),\n          title: \"\",\n          description: \"\",\n          active: true,\n          dependsOn: []\n        };\n        this.state.addTodo(todo);\n        this.state.setCurrentTodoId(todo.id);\n      },\n      getCurrentTodo: () => {\n        return this.state.board.todos[this.state.currentTodoId];\n      },\n      setCurrentTodoId: todoId => {\n        this.setState({ currentTodoId: todoId });\n      },\n      setBoard: board => this.setState({ board }),\n      addTodo: todo => {\n        const board = { ...this.state.board };\n        board.todos[todo.id] = todo;\n        this.state.setBoard(board);\n      },\n      removeTodo: todo => {\n        const board = { ...this.state.board };\n        delete board.todos[todo.id];\n        this.state.setBoard(board);\n      },\n      updateTodo: todo => {\n        const board = { ...this.state.board };\n        board.todos[todo.id] = todo;\n        this.state.setBoard(board);\n      }\n    };\n  }\n\n  async componentDidMount() {\n    const board = (await loadBoard()).data;\n    console.log(board);\n    this.state.setBoard(board);\n    setInterval(() => saveBoard(this.state.board), 3000);\n  }\n\n  render() {\n    if (!this.state.board) {\n      return <div />;\n    }\n    return (\n      <AppContext.Provider value={this.state}>\n        <Board />\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}